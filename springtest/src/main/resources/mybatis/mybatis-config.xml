<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<!-- XML 配置文件包含对 MyBatis 系统的核心设置 -->
<configuration>
    <!-- 指定 MyBatis 数据库配置文件 -->
    <properties resource="db.properties"/>
    <!-- 指定 MyBatis 所用日志的具体实现 -->
    <settings>
        <setting name="logImpl" value="STDOUT_LOGGING"/>
    </settings>
    <!--    <objectFactory type="org.mybatis.example.ExampleObjectFactory">-->
    <!--        <property name="someProperty" value="100"/>-->
    <!--    </objectFactory>-->
    <environments default="test95">
        <!-- test1 -->
        <environment id="test1">
            <transactionManager type="JDBC">
                <property name="" value=""/>
            </transactionManager>
            <dataSource type="UNPOOLED">
                <property name="driver" value="${test1.jdbc.driver}"/>
                <property name="url" value="${test1.jdbc.url}"/>
                <property name="username" value="${test1.jdbc.username}"/>
                <property name="password" value="${test1.jdbc.password}"/>
            </dataSource>
        </environment>
        <!-- test2 -->
        <environment id="test2">
            <transactionManager type="JDBC">
                <property name="" value=""/>
            </transactionManager>
            <dataSource type="UNPOOLED">
                <property name="driver" value="${test2.jdbc.driver}"/>
                <property name="url" value="${test2.jdbc.url}"/>
                <property name="username" value="${test2.jdbc.username}"/>
                <property name="password" value="${test2.jdbc.password}"/>
            </dataSource>
        </environment>
        <!-- 环境配置，即连接的数据库。 -->
        <environment id="test95">
            <!-- 指定事务管理类型，type="JDBC"指直接简单使用了JDBC的提交和回滚设置 -->
            <transactionManager type="JDBC"/>
            <!-- dataSource指数据源配置，POOLED是JDBC连接对象的数据源连接池的实现。 -->
            <dataSource type="POOLED">
                <property name="driver" value="${test95.jdbc.driver}"/>
                <property name="url" value="${test95.jdbc.url}"/>
                <property name="username" value="${test95.jdbc.username}"/>
                <property name="password" value="${test95.jdbc.password}"/>
            </dataSource>
        </environment>
        <!-- test3 -->
        <environment id="test3">
            <transactionManager type="JDBC">
                <property name="" value=""/>
            </transactionManager>
            <dataSource type="UNPOOLED">
                <property name="driver" value="${test3.jdbc.driver}"/>
                <property name="url" value="${test3.jdbc.url}"/>
                <property name="username" value="${test3.jdbc.username}"/>
                <property name="password" value="${test3.jdbc.password}"/>
            </dataSource>
        </environment>
        <!-- test4 -->
        <environment id="test4">
            <transactionManager type="JDBC">
                <property name="" value=""/>
            </transactionManager>
            <dataSource type="UNPOOLED">
                <property name="driver" value="${test4.jdbc.driver}"/>
                <property name="url" value="${test4.jdbc.url}"/>
                <property name="username" value="${test4.jdbc.username}"/>
                <property name="password" value="${test4.jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!-- mappers告诉了MyBatis去哪里找持久化类的映射文件 -->
    <mappers>
        <mapper resource="mybatis/mapper/UserGroupMapper.xml"/>
        <!--Caused by: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.example.springtest.chapter001.mapper.UserGroupMapper.BaseResultMap
        编译失败-->
        <!--        <package name ="com.example.springtest.chapter001.mapper" />-->
        <!--编译成功
                        org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.example.springtest.chapter001.mapper.UserGroupMapper.selectByPrimaryKey-->
        <!--        <mapper class="com.example.springtest.chapter001.mapper.UserGroupMapper" />-->
    </mappers>

</configuration>
